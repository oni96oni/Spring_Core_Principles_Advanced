프록시 패턴과 데코레이션 패턴
    프로젝트 생성

    예제 프로젝트 만들기 v1
        다양한 상황에서 프록시 사용법 이해가 목적!

        v1 - 인터페이스와 구현클래스 - 스프링 빈 수동 등록
        v2 - 인터페이스 없는 구체 클래스 - 스프링 빈 수동 등록
        v3 - 컴포넌트 스캔으로 스프링 빈 자동 등록

        @Controller 또는 @RequestMapping 애노테이션이 타입에 있으면 스프링 컨트롤러로 인식한다.
        스프링 컨트롤러로 인식해야, HTTP URL이 매핑되고 동작한다. 이 애노테이션은 인터페이스에 사용해도 된다.

        @SpringBootApplication에서 scanBasePackages를 지정하면
        컴포넌트 스캔을 시작할 위치를 지정하는것으로 해당 패키지와 그 하위 패키지를 컴포넌트 스캔한다.
        지정하지 않으면? ProxyApplication이 있는 패키지와 그 하위 패키지를 스캔한다.

    예제 프로젝트 만들기 v2
        인터페이스가 없는것을 구체 클래스라고한다.

    예제 프로젝트 만들기 v3

    요구사항 추가
        결과 적으로 로그를 남기고 싶은 클래스가 수백개라면 수백개의 클래스를 모두 고쳐야 한다.
        ★로그를 남길 때 기존 원본 코드를 변경해야 한다는 사실 그 자체가 개발자에게 가장 큰 문제!

        원본 코드를 전혀 수정하지 않고, 로그 추적기를 적용해라
        특정 메서드는 로그를 출력하지 않는 기능
            보안상 일부는 로그를 출력하면 안된다.
        다양한 케이스에 적용가능해야한다.
            v1 - 인터페이스가 있는 구현 클래스에 적요ㅕㅇ
            v2 - 인터페이스가 없는 구체 클래스에 적용
            v3 - 컴포넌트 스캔 대상에 기능 적용

        가장 어려운 문제 -> 원본 코드를 전혀 수정하지 않고, 로그 추적기를 도입 하는것이다.
        프록시의 개념을 먼저 이해해야 한다.

    프록시, 프록시 패턴, 데코레이터 패턴 - 소개

